#pragma once

#include <Windows.h>
#include <wrl.h>
#include <d3d12.h>
#include <DirectXMath.h>
#include <d3dx12.h>
#include <string.h>


/// <summary>
/// 3Dオブジェクト
/// </summary>
class Model
{
public:
	//objファイルから3Dモデルを読み込む
	static Model* LoadFromOBJ();

	//setter
	static void SetDevice(ID3D12Device* device) { Model::device = device; }

	//各種バッファ生成
	void CreateBuffers();

	void Draw(ID3D12GraphicsCommandList* cmdList, UINT rootParamIndexMaterial);

public: // サブクラス
// 頂点データ構造体
	struct VertexPosNormalUv
	{
		XMFLOAT3 pos; // xyz座標
		XMFLOAT3 normal; // 法線ベクトル
		XMFLOAT2 uv;  // uv座標
	};



	struct ConstBufferDataB1 {
		XMFLOAT3 ambient;	//アンビエント係数
		float pad1;			//パティング
		XMFLOAT3 diffuse;	//ディフーズ係数
		float pad2;			//パティング
		XMFLOAT3 specular;	//スペキュラー係数
		float alpha;		//アルファ
	};

private:
	//objファイルから3Dモデルを読み込む
	void LoadFromOBJInternal();

	/// <summary>
	//マテリアル読み込み
	/// </summary>
	void LoadMaterial(const std::string& directoryPath, const std::string& filename);

	/// <summary>
	/// テクスチャ読み込み
	/// </summary>
	void LoadTexture(const std::string& directoryPath, const std::string& filename);

	/// <summary>
	/// デスクリプタヒープの初期化
	/// </summary>
	static void InitializeDescriptorHeap();

private:// メンバ変数
	// デスクリプタサイズ
	static UINT descriptorHandleIncrementSize;
	// 頂点バッファ
	ComPtr<ID3D12Resource> vertBuff;
	// インデックスバッファ
	ComPtr<ID3D12Resource> indexBuff;
	// 頂点バッファビュー
	D3D12_VERTEX_BUFFER_VIEW vbView;
	// インデックスバッファビュー
	D3D12_INDEX_BUFFER_VIEW ibView;
	// テクスチャバッファ
	ComPtr<ID3D12Resource> texbuff;
	// デスクリプタヒープ
	static ComPtr<ID3D12DescriptorHeap> descHeap;
	// シェーダリソースビューのハンドル(CPU)
	CD3DX12_GPU_DESCRIPTOR_HANDLE gpuDescHandleSRV;
	// シェーダリソースビューのハンドル(CPU)
	CD3DX12_CPU_DESCRIPTOR_HANDLE cpuDescHandleSRV;

	ComPtr<ID3D12Resource> constBuffB1; // 定数バッファ


	// 頂点インデックス配列
	std::vector<unsigned short> indices;
	// 頂点データ配列
	std::vector<VertexPosNormalUv> vertices;


	//デバイス
	static ID3D12Device* device;

	//マテリアル
	struct Material
	{
		std::string name; //マテリアル名
		XMFLOAT3 ambient; //アンビエント影響度
		XMFLOAT3 diffuse; //ディフューズ影響度
		XMFLOAT3 specular; //スペキュラー影響度
		float alpha; //アルファ
		std::string textureFilename; //テクスチャファイル名
		//コンストラクタ
		Material() {
			ambient = { 0.3f,0.3f,0.3f };
			diffuse = { 0.0f,0.0f,0.0f };
			specular = { 0.0f,0.0f,0.0f };
			alpha = 1.0f;
		}
	};

	Material material;


};